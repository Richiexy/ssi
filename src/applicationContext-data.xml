<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/cache 
		http://www.springframework.org/schema/cache/spring-cache.xsd ">
	
	<!-- 数据库配置属性文件 -->
	<!-- Spring容器仅允许最多定义一个PropertyPlaceholderConfigurer,其余的会被Spring忽略掉 -->
  	<context:property-placeholder 
  		location="classpath:jdbc/jdbc.properties,
  					classpath:cxf/CXFClient.properties"/>
  					
	<!-- 添加缓存配置 -->
	<cache:annotation-driven cache-manager="cacheManager"/>
	<!-- Spring缓存 -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
       <property name="caches">
          <set>
             <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default"/>
             <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="andCache"/>
 	          <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="cacheDemo"/>
          </set>
       </property>
    </bean>	
	
	<!-- 加载资源文件 不用ResourceBundleMessageSource 推荐使用 ReloadableResourceBundleMessageSource -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames"> 
			<list> 
			 	<value>classpath:i18n/messages</value>
			</list>  
		</property>
	</bean>
	
	<!-- 数据源
		<jee:jndi-lookup id="jndiDataSource" jndi-name="java:comp/env/jdbc/datasource" />  
	 -->
 
 	<bean id="dataSource"  class="com.alibaba.druid.pool.DruidDataSource"> 
		 <property name="url" value="${default_jdbcUrl}" />
		 <property name="username" value="${default_user}" />
		 <property name="password" value="${default_password}" />
		 <!-- 配置初始化大小、最小、最大 -->
	      <property name="initialSize" value="20" />
	      <property name="minIdle" value="30" /> 
	      <property name="maxActive" value="100" />
	
	      <!-- 配置获取连接等待超时的时间 -->
	      <property name="maxWait" value="60000" />
	
	      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	      <property name="timeBetweenEvictionRunsMillis" value="60000" />
	
	      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	      <property name="minEvictableIdleTimeMillis" value="300000" />
	
	      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	      <property name="poolPreparedStatements" value="true" />
	      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		  
	      <property name="filters" value="stat" />
	      
	      <property name="proxyFilters">
	        <list>
	            <ref bean="log-filter"/>
	        </list>
	      </property>
	</bean>
	
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<property name="statementLogEnabled" value="true" />
		<property name="statementExecuteAfterLogEnabled" value="false" />
		<property name="statementExecuteQueryAfterLogEnabled" value="false" />
		<property name="statementExecuteUpdateAfterLogEnabled" value="false" />
		<property name="statementExecuteBatchAfterLogEnabled" value="false" />
		<property name="statementCloseAfterLogEnabled" value="false" />
        <property name="statementExecutableSqlLogEnable" value="true" />
	</bean> 
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	    <property name="dataSource" ref="dataSource" />  
     	<property name="configLocation" value="classpath:mybatis-config.xml"></property> 
     	<property name="mapperLocations" value="classpath:com/ssi/model/mapper/*Mapper.xml" />  
	</bean> 
	
	<!-- ExecutorType默认为SIMPLE而不是BATCH -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory" />
        <constructor-arg index="1" value="BATCH" />
    </bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	
	<!-- 配置事务管理器 -->  
  	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    
    	<property name="dataSource" ref="dataSource"/>    
  	</bean> 
	  <!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>